return {
  "neovim/nvim-lspconfig",
  event = { "BufReadPre", "BufNewFile" },
  dependencies = {
    "hrsh7th/cmp-nvim-lsp",
    { "antosha417/nvim-lsp-file-operations", config = true },
  },
  config = function()
    -- import lspconfig plugin
    local lspconfig = require("lspconfig")
    local lsp = require("mat.core.lsp")

    -- import cmp-nvim-lsp plugin
    local cmp_nvim_lsp = require("cmp_nvim_lsp")

    -- Used to enable autocompletion (assign to every lsp server config)
    local capabilities = cmp_nvim_lsp.default_capabilities()

    vim.diagnostic.config({
      signs = {
        text = {
          [vim.diagnostic.severity.ERROR] = "",
          [vim.diagnostic.severity.WARN] = "",
          [vim.diagnostic.severity.INFO] = "",
          [vim.diagnostic.severity.HINT] = "",
        },
      },
    })

    -- PYTHON
    vim.lsp.config("basedpyright-langserver", {
      capabilities = capabilities,
      handlers = lsp.handlers,
      on_attach = lsp.on_attach,
      root_dir = lspconfig.util.root_pattern(".git"),
    })
    vim.lsp.enable("basedpyright-langserver")

    vim.lsp.config("ruff", {
      capabilities = capabilities,
      handlers = lsp.handlers,
      on_attach = lsp.on_attach_backup,
    })
    vim.lsp.enable("ruff")

    vim.api.nvim_create_autocmd("LspAttach", {
      group = vim.api.nvim_create_augroup("lsp_attach_disable_ruff_hover", { clear = true }),
      callback = function(args)
        local client = vim.lsp.get_client_by_id(args.data.client_id)
        if client == nil then
          return
        end
        if client.name == "ruff" then
          -- Disable hover in favor of Pyright
          client.server_capabilities.hoverProvider = false
        end
      end,
      desc = "LSP: Disable hover capability from Ruff",
    })

    -- RUST
    vim.lsp.config("rust-analyzer", {
      handlers = lsp.handlers,
      on_attach = lsp.on_attach,
      settings = {
        ["rust-analyzer"] = {
          imports = {
            granularity = {
              group = "module",
            },
            prefix = "self",
          },
          cargo = {
            buildScripts = {
              enable = true,
            },
          },
          procMacro = {
            enable = true,
          },
        },
      },
    })
    vim.lsp.enable("rust-analyzer")

    -- CPP
    vim.lsp.config("clangd", {
      capabilities = capabilities,
      handlers = lsp.handlers,
      on_attach = lsp.on_attach,
    })
    vim.lsp.enable("clangd")

    -- No need to set `hybridMode` to `true` as it's the default value
    lspconfig.volar.setup({
      capabilities = capabilities,
      handlers = lsp.handlers,
      on_attach = lsp.on_attach,
    })
    -- https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#omnisharp
    lspconfig.omnisharp.setup({
      cmd = { "dotnet", "/usr/bin/omnisharp" },

      -- Settings from .editorconfig
      enable_editorconfig_support = true,

      enable_ms_build_load_projects_on_demand = false,

      enable_roslyn_analyzers = false,

      organize_imports_on_format = true,

      enable_import_completion = false,

      sdk_include_prereleases = true,

      analyze_open_documents_only = false,
    })
  end,
}
